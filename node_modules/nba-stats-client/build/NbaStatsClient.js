'use strict';
'use es6';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _requestPromise = require('request-promise');

var _requestPromise2 = _interopRequireDefault(_requestPromise);

var _moment = require('moment');

var _moment2 = _interopRequireDefault(_moment);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var NbaStatsClient = function () {
  function NbaStatsClient() {
    _classCallCheck(this, NbaStatsClient);
  }

  _createClass(NbaStatsClient, null, [{
    key: 'getDateStringFormat',
    value: function getDateStringFormat() {
      return 'YYYYMMDD';
    }
  }, {
    key: 'getBaseUri',
    value: function getBaseUri() {
      return 'http://data.nba.com';
    }
  }, {
    key: 'getHeaders',
    value: function getHeaders() {
      return { 'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/45.0.2454.101 Safari/537.36',
        'referer': 'http://stats.nba.com/scores/' };
    }
  }, {
    key: 'buildRequest',
    value: function buildRequest(uri) {
      return {
        uri: uri,
        headers: NbaStatsClient.getHeaders(),
        json: true
      };
    }
  }, {
    key: 'fetch',
    value: function fetch(uri) {
      return (0, _requestPromise2.default)(NbaStatsClient.buildRequest(uri)).then(function (response) {
        return response;
      }).catch(function (err) {
        return console.log(err);
      });
    }
  }, {
    key: 'getGamesUriFromDateString',
    value: function getGamesUriFromDateString(dateString) {
      if (!NbaStatsClient.isDateStringValid(dateString)) {
        throw new Error('invalid dateString');
      }

      return NbaStatsClient.getBaseUri() + '/data/5s/json/cms/noseason/scoreboard/' + dateString + '/games.json';
    }
  }, {
    key: 'getGamesUri',
    value: function getGamesUri(year, month, day) {
      return NbaStatsClient.getGamesUriFromDateString(NbaStatsClient.buildDateString(year, month, day));
    }
  }, {
    key: 'getBoxScoreUriFromDateString',
    value: function getBoxScoreUriFromDateString(dateString, gameId) {
      if (!NbaStatsClient.isDateStringValid(dateString)) {
        throw new Error('invalid dateString');
      }

      return NbaStatsClient.getBaseUri() + '/data/5s/json/cms/noseason/game/' + dateString + '/' + gameId + '/boxscore.json';
    }
  }, {
    key: 'getBoxScoreUri',
    value: function getBoxScoreUri(year, month, day, gameId) {
      return NbaStatsClient.getBoxScoreUriFromDateString(NbaStatsClient.buildDateString(year, month, day), gameId);
    }
  }, {
    key: 'getPlayByPlayUriFromDateString',
    value: function getPlayByPlayUriFromDateString(dateString, gameId) {
      if (!NbaStatsClient.isDateStringValid(dateString)) {
        throw new Error('invalid dateString');
      }

      return NbaStatsClient.getBaseUri() + '/data/5s/json/cms/noseason/game/' + dateString + '/' + gameId + '/pbp_all.json';
    }
  }, {
    key: 'getPlayByPlayUri',
    value: function getPlayByPlayUri(year, month, day, gameId) {
      return NbaStatsClient.getPlayByPlayUriFromDateString(NbaStatsClient.buildDateString(year, month, day), gameId);
    }
  }, {
    key: 'getGames',
    value: function getGames(year, month, day) {
      return NbaStatsClient.fetch(NbaStatsClient.getGamesUri(year, month, day));
    }
  }, {
    key: 'getGamesFromDate',
    value: function getGamesFromDate(date) {
      return NbaStatsClient.fetch(NbaStatsClient.getGamesUriFromDateString(NbaStatsClient.buildDateStringFromDate(date)));
    }
  }, {
    key: 'getGamesFromDateString',
    value: function getGamesFromDateString(dateString) {
      if (!NbaStatsClient.isDateStringValid(dateString)) {
        throw new Error('invalid dateString');
      }

      return NbaStatsClient.fetch(NbaStatsClient.getGamesUriFromDateString(dateString));
    }
  }, {
    key: 'getBoxScore',
    value: function getBoxScore(year, month, day, gameId) {
      return NbaStatsClient.fetch(NbaStatsClient.getBoxScoreUri(year, month, day, gameId));
    }
  }, {
    key: 'getBoxScoreFromDate',
    value: function getBoxScoreFromDate(date, gameId) {
      return NbaStatsClient.fetch(NbaStatsClient.getBoxScoreUriFromDateString(NbaStatsClient.buildDateStringFromDate(date), gameId));
    }
  }, {
    key: 'getBoxScoreFromDateString',
    value: function getBoxScoreFromDateString(dateString, gameId) {
      if (!NbaStatsClient.isDateStringValid(dateString)) {
        throw new Error('invalid dateString');
      }

      return NbaStatsClient.fetch(NbaStatsClient.getBoxScoreUriFromDateString(dateString, gameId));
    }
  }, {
    key: 'getPlayByPlay',
    value: function getPlayByPlay(year, month, day, gameId) {
      return NbaStatsClient.fetch(NbaStatsClient.getPlayByPlayUri(year, month, day, gameId));
    }
  }, {
    key: 'getPlayByPlayFromDate',
    value: function getPlayByPlayFromDate(date, gameId) {
      return NbaStatsClient.fetch(NbaStatsClient.getPlayByPlayUriFromDateString(NbaStatsClient.buildDateStringFromDate(date), gameId));
    }
  }, {
    key: 'getPlayByPlayFromDateString',
    value: function getPlayByPlayFromDateString(dateString, gameId) {
      if (!NbaStatsClient.isDateStringValid(dateString)) {
        throw new Error('invalid dateString');
      }

      return NbaStatsClient.fetch(NbaStatsClient.getPlayByPlayUriFromDateString(dateString, gameId));
    }
  }, {
    key: 'buildDateString',
    value: function buildDateString(year, month, day) {
      return (0, _moment2.default)().year(year).month(month - 1).date(day).format(NbaStatsClient.getDateStringFormat());
    }
  }, {
    key: 'buildDateStringFromDate',
    value: function buildDateStringFromDate(date) {
      return (0, _moment2.default)(date).format(NbaStatsClient.getDateStringFormat());
    }
  }, {
    key: 'isDateStringValid',
    value: function isDateStringValid(dateString) {
      var parsedDate = (0, _moment2.default)(dateString, NbaStatsClient.getDateStringFormat());
      return parsedDate.isValid();
    }
  }]);

  return NbaStatsClient;
}();

exports.default = NbaStatsClient;
;