'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _blessed = require('blessed');

var _blessed2 = _interopRequireDefault(_blessed);

var _path = require('path');

var _path2 = _interopRequireDefault(_path);

var _wideAlign = require('wide-align');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const getBlessed = (homeTeam, visitorTeam) => {
  const screen = _blessed2.default.screen({
    smartCSR: true,
    fullUnicode: true,
    title: 'NBA-GO'
  });

  const baseBox = _blessed2.default.box({
    top: 0,
    left: 0,
    width: '100%',
    height: '100%',
    padding: 0,
    style: {
      fg: 'black',
      bg: 'black',
      border: {
        fg: '#f0f0f0',
        bg: 'black'
      }
    }
  });

  const scoreboardTable = _blessed2.default.table({
    top: 5,
    left: 'center',
    width: '33%',
    height: 8,
    tags: true,
    border: {
      type: 'line'
    },
    style: {
      header: {
        fg: 'white'
      },
      cell: {
        fg: 'white'
      }
    }
  });

  const homeTeamFullNameText = _blessed2.default.text({
    parent: screen,
    top: 7,
    left: `33%-${homeTeam.getFullName({ color: false }).length + 24}`,
    width: 25,
    align: 'left',
    content: `${homeTeam.getFullName({
      color: true
    })}`,
    style: {
      fg: 'white'
    }
  });

  const homeTeamStandingsText = _blessed2.default.text({
    top: 8,
    left: '33%-39',
    width: 15,
    align: 'right',
    content: (0, _wideAlign.right)(`HOME (${homeTeam.getWins()} - ${homeTeam.getLoses()})`, 15),
    style: {
      fg: '#fbfbfb'
    }
  });

  const homeTeamScoreText = _blessed2.default.bigtext({
    font: _path2.default.resolve(__filename, '../../data/fonts/ter-u12n.json'),
    fontBold: _path2.default.resolve(__filename, '../../data/fonts/ter-u12b.json'),
    top: 2,
    left: '33%-20',
    width: 15,
    align: 'right',
    vlign: 'center',
    style: {
      fg: 'white'
    }
  });

  const visitorTeamFullNameText = _blessed2.default.text({
    top: 7,
    left: '66%+28',
    width: 25,
    align: 'left',
    content: `${visitorTeam.getFullName({
      color: true
    })}`,
    tags: true,
    style: {
      fg: 'white'
    }
  });

  const visitorTeamStandingsText = _blessed2.default.text({
    top: 8,
    left: '66%+28',
    width: 15,
    align: 'left',
    content: `(${visitorTeam.getWins()} - ${visitorTeam.getLoses()}) AWAY`,
    style: {
      fg: '#fbfbfb'
    }
  });

  const visitorTeamScoreText = _blessed2.default.bigtext({
    font: _path2.default.resolve(__filename, '../../data/fonts/ter-u12n.json'),
    fontBold: _path2.default.resolve(__filename, '../../data/fonts/ter-u12n.json'),
    top: 2,
    left: '66%+6',
    width: 15,
    align: 'left',
    style: {
      fg: 'white'
    }
  });

  const seasonText = _blessed2.default.text({
    top: 0,
    left: 'center',
    align: 'center',
    style: {
      fg: 'white'
    }
  });

  const timeText = _blessed2.default.text({
    top: 13,
    left: 'center',
    align: 'center',
    style: {
      fg: 'white'
    }
  });

  const dateText = _blessed2.default.text({
    top: 2,
    left: 'center',
    align: 'center',
    style: {
      fg: 'white'
    }
  });

  const arenaText = _blessed2.default.text({
    top: 3,
    left: 'center',
    align: 'center',
    style: {
      fg: 'white'
    }
  });

  const playByPlayBox = _blessed2.default.box({
    parent: screen,
    top: 15,
    left: 3,
    width: '70%-3',
    height: '100%-15',
    padding: {
      top: 0,
      right: 0,
      left: 2,
      bottom: 0
    },
    align: 'left',
    keys: true,
    mouse: false,
    scrollable: true,
    focused: true,
    label: ' Play By Play ',
    border: {
      type: 'line'
    },
    scrollbar: {
      ch: ' ',
      track: {
        bg: '#0253a4'
      },
      style: {
        inverse: true
      }
    }
  });

  const boxscoreTable = _blessed2.default.table({
    parent: screen,
    top: 15,
    left: '70%',
    width: '30%-3',
    height: '100%-15',
    tags: true,
    pad: 0,
    label: ' Box Score ',
    border: {
      type: 'line'
    }
  });

  screen.append(baseBox);
  screen.append(seasonText);
  screen.append(timeText);
  screen.append(dateText);
  screen.append(arenaText);
  screen.append(homeTeamFullNameText);
  screen.append(homeTeamStandingsText);
  screen.append(homeTeamScoreText);
  screen.append(visitorTeamFullNameText);
  screen.append(visitorTeamStandingsText);
  screen.append(visitorTeamScoreText);
  screen.append(scoreboardTable);
  screen.append(playByPlayBox);
  screen.append(boxscoreTable);
  screen.key(['escape', 'q', 'C-c'], () => process.exit(1));

  return {
    screen,
    scoreboardTable,
    seasonText,
    timeText,
    dateText,
    arenaText,
    homeTeamScoreText,
    visitorTeamScoreText,
    playByPlayBox,
    boxscoreTable
  };
};

exports.default = getBlessed;
//# sourceMappingURL=blessed.js.map