'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _format = require('date-fns/format');

var _format2 = _interopRequireDefault(_format);

var _wideAlign = require('wide-align');

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _log = require('../../utils/log');

var _table = require('../../utils/table');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const alignCenter = columns => columns.map(column => {
  if (typeof column === 'string') {
    return { content: column, vAlign: 'center', hAlign: 'center' };
  }

  return (0, _extends3.default)({}, column, { vAlign: 'center', hAlign: 'center' });
});

const createTeamStatsColumns = (teamName, {
  gp,
  w,
  l,
  pts,
  fgPct,
  fg3Pct,
  ftPct,
  oreb,
  dreb,
  reb,
  ast,
  blk,
  stl,
  tov,
  pf,
  plusMinus
}) => [teamName, `${w} - ${l}`, (w / gp).toFixed(3), `${pts}`, `${(fgPct * 100).toFixed(1)}`, `${(fg3Pct * 100).toFixed(1)}`, `${(ftPct * 100).toFixed(1)}`, `${oreb}`, `${dreb}`, `${reb}`, `${ast}`, `${blk}`, `${stl}`, `${tov}`, `${pf}`, `${plusMinus}`];

const preview = (homeTeam, visitorTeam, {
  date,
  time,
  arena,
  city,
  state,
  display_year,
  display_season,
  homeTeamDashboardData,
  visitorTeamDashboardData
}) => {
  const gamePreviewTable = (0, _table.basicTable)();
  const columnMaxWidth = Math.max(homeTeam.getFullName({ color: false }).length, visitorTeam.getFullName({ color: false }).length);

  gamePreviewTable.push(alignCenter([{
    colSpan: 16,
    content: (0, _log.bold)(`${display_year} ${display_season}`)
  }]), alignCenter([{
    colSpan: 16,
    content: (0, _log.bold)(`${_nodeEmoji2.default.get('calendar')}  ${(0, _format2.default)(date, 'YYYY/MM/DD')} ${time.slice(0, 2)}:${time.slice(2, 4)}`)
  }]), alignCenter([{
    colSpan: 16,
    content: (0, _log.bold)(`${_nodeEmoji2.default.get('house')}  ${arena} ï½œ ${city}, ${state}`)
  }]), alignCenter(createTeamStatsColumns((0, _wideAlign.center)(homeTeam.getFullName({ color: true }), columnMaxWidth), homeTeamDashboardData)), alignCenter(['', (0, _log.bold)('RECORD'), (0, _log.bold)('WIN%'), (0, _log.bold)('PTS'), (0, _log.bold)('FG%'), (0, _log.bold)('3P%'), (0, _log.bold)('FT%'), (0, _log.bold)('OREB'), (0, _log.bold)('DREB'), (0, _log.bold)('REB'), (0, _log.bold)('AST'), (0, _log.bold)('BLK'), (0, _log.bold)('STL'), (0, _log.bold)('TOV'), (0, _log.bold)('PF'), (0, _log.bold)('+/-')]), alignCenter(createTeamStatsColumns((0, _wideAlign.center)(visitorTeam.getFullName({ color: true }), columnMaxWidth), visitorTeamDashboardData)));

  console.log(gamePreviewTable.toString());
};

exports.default = preview;
//# sourceMappingURL=preview.js.map