'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getTeamInfo = undefined;

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _inquirer = require('inquirer');

var _inquirer2 = _interopRequireDefault(_inquirer);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _stringz = require('stringz');

var _wideAlign = require('wide-align');

var _pMap = require('p-map');

var _pMap2 = _interopRequireDefault(_pMap);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _Team = require('../Team');

var _Team2 = _interopRequireDefault(_Team);

var _nba = require('../../utils/nba');

var _nba2 = _interopRequireDefault(_nba);

var _log = require('../../utils/log');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const MAX_WIDTH = 81;
const TEAMNAME_WIDTH = 20;
const STATUS_WIDTH = 18;

const padHomeTeamName = name => (0, _log.bold)((0, _wideAlign.right)(name, TEAMNAME_WIDTH));
const padVisitorTeamName = name => (0, _log.bold)((0, _wideAlign.left)(name, TEAMNAME_WIDTH));
const padGameStatus = status => (0, _wideAlign.center)(status, STATUS_WIDTH);

const createGameChoice = (homeTeam, visitorTeam, periodTime) => {
  let winner = '';
  const periodStatus = periodTime.period_status,
        gameClock = periodTime.game_clock;


  if (+homeTeam.getScore() > +visitorTeam.getScore()) {
    winner = 'home';
  } else if (+homeTeam.getScore() === +visitorTeam.getScore()) {
    winner = null;
  } else {
    winner = 'visitor';
  }

  const homeTeamName = padHomeTeamName(winner === 'home' ? homeTeam.getWinnerName('left') : homeTeam.getName({ color: true }));
  const visitorTeamName = padVisitorTeamName(winner === 'visitor' ? visitorTeam.getWinnerName('right') : visitorTeam.getName({ color: true }));
  const match = `${homeTeamName}${(0, _wideAlign.center)(_nodeEmoji2.default.get('basketball'), 8)}${visitorTeamName}`;
  const homeTeamScore = winner === 'home' ? (0, _wideAlign.right)((0, _log.bold)((0, _log.neonGreen)(homeTeam.getScore())), 4) : (0, _wideAlign.right)((0, _log.bold)(homeTeam.getScore()), 4);
  const visitorTeamScore = winner === 'visitor' ? (0, _wideAlign.left)((0, _log.bold)((0, _log.neonGreen)(visitorTeam.getScore())), 4) : (0, _wideAlign.left)((0, _log.bold)(visitorTeam.getScore()), 4);
  const score = `${homeTeamScore} : ${visitorTeamScore}`;

  return `│⌘${match}│${score}│${padGameStatus(`${(0, _log.bold)(periodStatus)} ${gameClock}`)}│`;
};

const getTeamInfo = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (team, seasonId) {
    var _ref2 = yield _nba2.default.teamInfoCommon({
      TeamID: team.id,
      Season: seasonId
    });

    const teamInfo = _ref2.teamInfoCommon;


    return new _Team2.default((0, _extends3.default)({}, teamInfo[0], {
      score: team.score,
      linescores: team.linescores,
      isHomeTeam: true
    }));
  });

  return function getTeamInfo(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

const chooseGameFromSchedule = (() => {
  var _ref3 = (0, _asyncToGenerator3.default)(function* (gamesData) {
    const spinner = (0, _ora2.default)('Loading Game Schedule').start();
    const header = `│ ${padHomeTeamName('Home')}${(0, _wideAlign.center)(_nodeEmoji2.default.get('basketball'), 8)}${padVisitorTeamName('Away')}│${(0, _wideAlign.center)('Score', 11)}│${padGameStatus('Status')}│`;

    const questions = [{
      name: 'game',
      message: 'Which game do you want to watch?',
      type: 'list',
      pageSize: 30,
      choices: [new _inquirer2.default.Separator(`${(0, _stringz.limit)('', MAX_WIDTH, '─')}`), new _inquirer2.default.Separator(header), new _inquirer2.default.Separator(`${(0, _stringz.limit)('', MAX_WIDTH, '─')}`)]
    }];

    const last = gamesData.length - 1;

    yield (0, _pMap2.default)(gamesData, (() => {
      var _ref4 = (0, _asyncToGenerator3.default)(function* (gameData, index) {
        const home = gameData.home,
              visitor = gameData.visitor,
              period_time = gameData.period_time;


        const homeTeam = yield getTeamInfo(home, process.env.season);
        const visitorTeam = yield getTeamInfo(visitor, process.env.season);

        questions[0].choices.push({
          name: createGameChoice(homeTeam, visitorTeam, period_time),
          value: { gameData, homeTeam, visitorTeam }
        });

        if (index !== last) {
          questions[0].choices.push(new _inquirer2.default.Separator(`${(0, _stringz.limit)('', MAX_WIDTH, '-')}`));
        } else {
          questions[0].choices.push(new _inquirer2.default.Separator(`${(0, _stringz.limit)('', MAX_WIDTH, '─')}`));
        }
      });

      return function (_x4, _x5) {
        return _ref4.apply(this, arguments);
      };
    })(), { concurrency: 1 });

    spinner.stop();

    const answer = yield _inquirer2.default.prompt(questions);

    return answer;
  });

  return function chooseGameFromSchedule(_x3) {
    return _ref3.apply(this, arguments);
  };
})();

exports.default = chooseGameFromSchedule;
exports.getTeamInfo = getTeamInfo;
//# sourceMappingURL=schedule.js.map