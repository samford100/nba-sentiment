{"version":3,"sources":["../../../src/command/game/index.js"],"names":["catchError","err","apiName","console","log","process","exit","getSeason","date","year","Date","month","get","env","season","toString","slice","getGameWithOptionalFilter","games","filter","split","components","team","toLowerCase","potentialGames","data","home","city","nickname","indexOf","visitor","length","homeTeam","visitorTeam","game","gameData","option","_date","gamesData","gameBoxScoreData","seasonMetaData","today","now","tomorrow","yesterday","getGamesFromDate","_gamesData","sports_content","getBoxScoreFromDate","id","_gameBoxScoreData","_seasonMetaData","sports_meta","season_meta","setGameStats","stats","setPlayers","players","player","setGameLeaders","Leaders","screen","scoreboardTable","seasonText","timeText","dateText","arenaText","homeTeamScoreText","visitorTeamScoreText","playByPlayBox","boxscoreTable","period_time","game_status","destroy","spinner","start","homeTeamDashboardData","visitorTeamDashboardData","teamSplits","Season","TeamID","getID","overallTeamDashboard","_homeTeamDashboardData","_visitorTeamDashboardData","stop","updatedPlayByPlayData","updatedGameBoxScoreData","setContent","display_year","display_season","arena","state","time","gamePlayByPlayData","getPlayByPlayFromDate","_updatedPlayByPlayData","_updatedGameBoxScoreData","lastPlay","play","pop","setScore","home_score","visitor_score","isFinal","period","description"],"mappings":"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","file":"index.js","sourcesContent":["/* eslint-disable no-await-in-loop, no-constant-condition */\n\nimport parse from 'date-fns/parse';\nimport addDays from 'date-fns/add_days';\nimport subDays from 'date-fns/sub_days';\nimport format from 'date-fns/format';\nimport getYear from 'date-fns/get_year';\nimport getMonth from 'date-fns/get_month';\nimport isValid from 'date-fns/is_valid';\nimport emoji from 'node-emoji';\nimport delay from 'delay';\nimport ora from 'ora';\n\nimport chooseGameFromSchedule, { getTeamInfo } from './schedule';\nimport preview from './preview';\nimport scoreboard from './scoreboard';\nimport boxScore from './boxScore';\nimport live from './live';\n\nimport NBA from '../../utils/nba';\nimport { error, bold } from '../../utils/log';\nimport { cfontsDate } from '../../utils/cfonts';\nimport getBlessed from '../../utils/blessed';\n\nconst catchError = (err, apiName) => {\n  error(err);\n  console.log('');\n  error(`Oops, ${apiName} goes wrong.`);\n  error(\n    'Please run nba-go again.\\nIf it still does not work, feel free to open an issue on https://github.com/xxhomey19/nba-go/issues'\n  );\n  process.exit(1);\n};\n\nconst getSeason = date => {\n  const year = getYear(new Date(date));\n  const month = getMonth(new Date(date));\n\n  if (year < 2012 || (year === 2012 && month < 5)) {\n    error(\n      `Sorry, https://stats.nba.com/ doesn't provide season data before 2012-13 ${emoji.get(\n        'confused'\n      )}`\n    );\n    process.exit(1);\n  }\n\n  if (month > 9) {\n    process.env.season = `${year}-${(year + 1).toString().slice(-2)}`;\n  } else {\n    process.env.season = `${year - 1}-${year.toString().slice(-2)}`;\n  }\n};\n\nconst getGameWithOptionalFilter = async (games, filter) => {\n  if (filter && filter.split('=')[0] === 'team') {\n    // TODO: Add more robust filtering but use team as proof of concept\n    const components = filter.split('=');\n    const team = components[1].toLowerCase();\n    const potentialGames = games.filter(\n      data =>\n        `${data.home.city.toLowerCase()} ${data.home.nickname.toLowerCase()}`.indexOf(\n          team\n        ) !== -1 ||\n        `${data.visitor.city.toLowerCase()} ${data.visitor.nickname.toLowerCase()}`.indexOf(\n          team\n        ) !== -1\n    );\n\n    if (!potentialGames.length)\n      error(`Can't find any teams that match ${team}`);\n    else if (potentialGames.length === 1) {\n      const homeTeam = await getTeamInfo(potentialGames[0].home);\n      const visitorTeam = await getTeamInfo(potentialGames[0].visitor);\n      return { game: { gameData: potentialGames[0], homeTeam, visitorTeam } };\n    } else return chooseGameFromSchedule(potentialGames);\n  }\n\n  return chooseGameFromSchedule(games);\n};\n\nconst game = async option => {\n  let _date;\n  let gamesData;\n  let gameBoxScoreData;\n  let seasonMetaData;\n\n  if (option.date) {\n    if (isValid(new Date(option.date))) {\n      _date = format(parse(option.date), 'YYYY/MM/DD');\n    } else {\n      error('Date is invalid');\n      process.exit(1);\n    }\n  } else if (option.today) {\n    _date = Date.now();\n  } else if (option.tomorrow) {\n    _date = addDays(Date.now(), 1);\n  } else if (option.yesterday) {\n    _date = subDays(Date.now(), 1);\n  } else {\n    error(`Can't find any option ${emoji.get('confused')}`);\n    process.exit(1);\n  }\n\n  getSeason(_date);\n\n  cfontsDate(_date);\n\n  try {\n    const {\n      sports_content: { games: { game: _gamesData } },\n    } = await NBA.getGamesFromDate(new Date(_date));\n    gamesData = _gamesData;\n  } catch (err) {\n    catchError(err, 'NBA.getGamesFromDate()');\n  }\n\n  const {\n    game: { homeTeam, visitorTeam, gameData },\n  } = await getGameWithOptionalFilter(gamesData, option.filter);\n\n  try {\n    const {\n      sports_content: {\n        game: _gameBoxScoreData,\n        sports_meta: { season_meta: _seasonMetaData },\n      },\n    } = await NBA.getBoxScoreFromDate(new Date(_date), gameData.id);\n\n    gameBoxScoreData = _gameBoxScoreData;\n    seasonMetaData = _seasonMetaData;\n  } catch (err) {\n    catchError(err, 'NBA.getBoxScoreFromDate()');\n  }\n\n  const { home, visitor } = gameBoxScoreData;\n\n  homeTeam.setGameStats(home.stats);\n  homeTeam.setPlayers(home.players.player);\n  homeTeam.setGameLeaders(home.Leaders);\n  visitorTeam.setGameStats(visitor.stats);\n  visitorTeam.setPlayers(visitor.players.player);\n  visitorTeam.setGameLeaders(visitor.Leaders);\n\n  const {\n    screen,\n    scoreboardTable,\n    seasonText,\n    timeText,\n    dateText,\n    arenaText,\n    homeTeamScoreText,\n    visitorTeamScoreText,\n    playByPlayBox,\n    boxscoreTable,\n  } = getBlessed(homeTeam, visitorTeam);\n\n  switch (gameData.period_time.game_status) {\n    case '1': {\n      screen.destroy();\n      console.log('');\n\n      const spinner = ora('Loading Game Preview').start();\n\n      let homeTeamDashboardData;\n      let visitorTeamDashboardData;\n\n      try {\n        const {\n          overallTeamDashboard: [_homeTeamDashboardData],\n        } = await NBA.teamSplits({\n          Season: process.env.season,\n          TeamID: homeTeam.getID(),\n        });\n        const {\n          overallTeamDashboard: [_visitorTeamDashboardData],\n        } = await NBA.teamSplits({\n          Season: process.env.season,\n          TeamID: visitorTeam.getID(),\n        });\n\n        homeTeamDashboardData = _homeTeamDashboardData;\n        visitorTeamDashboardData = _visitorTeamDashboardData;\n      } catch (err) {\n        catchError(err, 'NBA.teamSplits()');\n      }\n\n      spinner.stop();\n\n      preview(homeTeam, visitorTeam, {\n        ...seasonMetaData,\n        ...gameBoxScoreData,\n        homeTeamDashboardData,\n        visitorTeamDashboardData,\n      });\n      break;\n    }\n\n    case 'Halftime':\n    case '2': {\n      let updatedPlayByPlayData;\n      let updatedGameBoxScoreData;\n\n      seasonText.setContent(\n        bold(`${seasonMetaData.display_year} ${seasonMetaData.display_season}`)\n      );\n      const { arena, city, state, date, time } = gameBoxScoreData;\n      dateText.setContent(\n        `${emoji.get('calendar')}  ${format(date, 'YYYY/MM/DD')} ${time.slice(\n          0,\n          2\n        )}:${time.slice(2, 4)}`\n      );\n      arenaText.setContent(\n        `${emoji.get('house')}  ${arena} | ${city}, ${state}`\n      );\n\n      while (true) {\n        let gamePlayByPlayData = {};\n\n        try {\n          const {\n            sports_content: { game: _updatedPlayByPlayData },\n          } = await NBA.getPlayByPlayFromDate(new Date(_date), gameData.id);\n\n          updatedPlayByPlayData = _updatedPlayByPlayData;\n        } catch (err) {\n          catchError(err, 'NBA.getPlayByPlayFromDate()');\n        }\n\n        try {\n          const {\n            sports_content: { game: _updatedGameBoxScoreData },\n          } = await NBA.getBoxScoreFromDate(new Date(_date), gameData.id);\n\n          updatedGameBoxScoreData = _updatedGameBoxScoreData;\n        } catch (err) {\n          catchError(err, 'NBA.getBoxScoreFromDate()');\n        }\n\n        gamePlayByPlayData = updatedPlayByPlayData;\n        gameBoxScoreData = updatedGameBoxScoreData;\n\n        const lastPlay = gamePlayByPlayData.play.slice(-1).pop();\n        homeTeam.setScore(lastPlay.home_score);\n        visitorTeam.setScore(lastPlay.visitor_score);\n\n        const isFinal =\n          (lastPlay.period === '4' || +lastPlay.period > 4) &&\n          lastPlay.description === 'End Period' &&\n          lastPlay.home_score !== lastPlay.visitor_score;\n\n        live(\n          homeTeam,\n          visitorTeam,\n          {\n            ...gamePlayByPlayData,\n            ...seasonMetaData,\n            isFinal,\n          },\n          gameBoxScoreData,\n          {\n            screen,\n            scoreboardTable,\n            timeText,\n            homeTeamScoreText,\n            visitorTeamScoreText,\n            playByPlayBox,\n            boxscoreTable,\n          }\n        );\n\n        if (isFinal) {\n          break;\n        }\n\n        await delay(\n          gameData.period_time.game_status === 'Halftime' ? 15000 : 3000\n        );\n      }\n      break;\n    }\n\n    case '3':\n    default: {\n      screen.destroy();\n      console.log('');\n      scoreboard(homeTeam, visitorTeam, {\n        ...gameBoxScoreData,\n        ...seasonMetaData,\n      });\n      console.log('');\n      boxScore(homeTeam, visitorTeam);\n    }\n  }\n};\n\nexport default game;\n"]}