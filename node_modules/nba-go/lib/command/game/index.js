'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _parse = require('date-fns/parse');

var _parse2 = _interopRequireDefault(_parse);

var _add_days = require('date-fns/add_days');

var _add_days2 = _interopRequireDefault(_add_days);

var _sub_days = require('date-fns/sub_days');

var _sub_days2 = _interopRequireDefault(_sub_days);

var _format = require('date-fns/format');

var _format2 = _interopRequireDefault(_format);

var _get_year = require('date-fns/get_year');

var _get_year2 = _interopRequireDefault(_get_year);

var _get_month = require('date-fns/get_month');

var _get_month2 = _interopRequireDefault(_get_month);

var _is_valid = require('date-fns/is_valid');

var _is_valid2 = _interopRequireDefault(_is_valid);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _delay = require('delay');

var _delay2 = _interopRequireDefault(_delay);

var _ora = require('ora');

var _ora2 = _interopRequireDefault(_ora);

var _schedule = require('./schedule');

var _schedule2 = _interopRequireDefault(_schedule);

var _preview = require('./preview');

var _preview2 = _interopRequireDefault(_preview);

var _scoreboard = require('./scoreboard');

var _scoreboard2 = _interopRequireDefault(_scoreboard);

var _boxScore = require('./boxScore');

var _boxScore2 = _interopRequireDefault(_boxScore);

var _live = require('./live');

var _live2 = _interopRequireDefault(_live);

var _nba = require('../../utils/nba');

var _nba2 = _interopRequireDefault(_nba);

var _log = require('../../utils/log');

var _cfonts = require('../../utils/cfonts');

var _blessed = require('../../utils/blessed');

var _blessed2 = _interopRequireDefault(_blessed);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const catchError = (err, apiName) => {
  (0, _log.error)(err);
  console.log('');
  (0, _log.error)(`Oops, ${apiName} goes wrong.`);
  (0, _log.error)('Please run nba-go again.\nIf it still does not work, feel free to open an issue on https://github.com/xxhomey19/nba-go/issues');
  process.exit(1);
}; /* eslint-disable no-await-in-loop, no-constant-condition */

const getSeason = date => {
  const year = (0, _get_year2.default)(new Date(date));
  const month = (0, _get_month2.default)(new Date(date));

  if (year < 2012 || year === 2012 && month < 5) {
    (0, _log.error)(`Sorry, https://stats.nba.com/ doesn't provide season data before 2012-13 ${_nodeEmoji2.default.get('confused')}`);
    process.exit(1);
  }

  if (month > 9) {
    process.env.season = `${year}-${(year + 1).toString().slice(-2)}`;
  } else {
    process.env.season = `${year - 1}-${year.toString().slice(-2)}`;
  }
};

const getGameWithOptionalFilter = (() => {
  var _ref = (0, _asyncToGenerator3.default)(function* (games, filter) {
    if (filter && filter.split('=')[0] === 'team') {
      // TODO: Add more robust filtering but use team as proof of concept
      const components = filter.split('=');
      const team = components[1].toLowerCase();
      const potentialGames = games.filter(function (data) {
        return `${data.home.city.toLowerCase()} ${data.home.nickname.toLowerCase()}`.indexOf(team) !== -1 || `${data.visitor.city.toLowerCase()} ${data.visitor.nickname.toLowerCase()}`.indexOf(team) !== -1;
      });

      if (!potentialGames.length) (0, _log.error)(`Can't find any teams that match ${team}`);else if (potentialGames.length === 1) {
        const homeTeam = yield (0, _schedule.getTeamInfo)(potentialGames[0].home);
        const visitorTeam = yield (0, _schedule.getTeamInfo)(potentialGames[0].visitor);
        return { game: { gameData: potentialGames[0], homeTeam, visitorTeam } };
      } else return (0, _schedule2.default)(potentialGames);
    }

    return (0, _schedule2.default)(games);
  });

  return function getGameWithOptionalFilter(_x, _x2) {
    return _ref.apply(this, arguments);
  };
})();

const game = (() => {
  var _ref2 = (0, _asyncToGenerator3.default)(function* (option) {
    let _date;
    let gamesData;
    let gameBoxScoreData;
    let seasonMetaData;

    if (option.date) {
      if ((0, _is_valid2.default)(new Date(option.date))) {
        _date = (0, _format2.default)((0, _parse2.default)(option.date), 'YYYY/MM/DD');
      } else {
        (0, _log.error)('Date is invalid');
        process.exit(1);
      }
    } else if (option.today) {
      _date = Date.now();
    } else if (option.tomorrow) {
      _date = (0, _add_days2.default)(Date.now(), 1);
    } else if (option.yesterday) {
      _date = (0, _sub_days2.default)(Date.now(), 1);
    } else {
      (0, _log.error)(`Can't find any option ${_nodeEmoji2.default.get('confused')}`);
      process.exit(1);
    }

    getSeason(_date);

    (0, _cfonts.cfontsDate)(_date);

    try {
      var _ref3 = yield _nba2.default.getGamesFromDate(new Date(_date));

      const _gamesData = _ref3.sports_content.games.game;

      gamesData = _gamesData;
    } catch (err) {
      catchError(err, 'NBA.getGamesFromDate()');
    }

    var _ref4 = yield getGameWithOptionalFilter(gamesData, option.filter),
        _ref4$game = _ref4.game;

    const homeTeam = _ref4$game.homeTeam,
          visitorTeam = _ref4$game.visitorTeam,
          gameData = _ref4$game.gameData;


    try {
      var _ref5 = yield _nba2.default.getBoxScoreFromDate(new Date(_date), gameData.id),
          _ref5$sports_content = _ref5.sports_content;

      const _gameBoxScoreData = _ref5$sports_content.game,
            _seasonMetaData = _ref5$sports_content.sports_meta.season_meta;


      gameBoxScoreData = _gameBoxScoreData;
      seasonMetaData = _seasonMetaData;
    } catch (err) {
      catchError(err, 'NBA.getBoxScoreFromDate()');
    }

    var _gameBoxScoreData2 = gameBoxScoreData;
    const home = _gameBoxScoreData2.home,
          visitor = _gameBoxScoreData2.visitor;


    homeTeam.setGameStats(home.stats);
    homeTeam.setPlayers(home.players.player);
    homeTeam.setGameLeaders(home.Leaders);
    visitorTeam.setGameStats(visitor.stats);
    visitorTeam.setPlayers(visitor.players.player);
    visitorTeam.setGameLeaders(visitor.Leaders);

    var _getBlessed = (0, _blessed2.default)(homeTeam, visitorTeam);

    const screen = _getBlessed.screen,
          scoreboardTable = _getBlessed.scoreboardTable,
          seasonText = _getBlessed.seasonText,
          timeText = _getBlessed.timeText,
          dateText = _getBlessed.dateText,
          arenaText = _getBlessed.arenaText,
          homeTeamScoreText = _getBlessed.homeTeamScoreText,
          visitorTeamScoreText = _getBlessed.visitorTeamScoreText,
          playByPlayBox = _getBlessed.playByPlayBox,
          boxscoreTable = _getBlessed.boxscoreTable;


    switch (gameData.period_time.game_status) {
      case '1':
        {
          screen.destroy();
          console.log('');

          const spinner = (0, _ora2.default)('Loading Game Preview').start();

          let homeTeamDashboardData;
          let visitorTeamDashboardData;

          try {
            var _ref6 = yield _nba2.default.teamSplits({
              Season: process.env.season,
              TeamID: homeTeam.getID()
            }),
                _ref6$overallTeamDash = (0, _slicedToArray3.default)(_ref6.overallTeamDashboard, 1);

            const _homeTeamDashboardData = _ref6$overallTeamDash[0];

            var _ref7 = yield _nba2.default.teamSplits({
              Season: process.env.season,
              TeamID: visitorTeam.getID()
            }),
                _ref7$overallTeamDash = (0, _slicedToArray3.default)(_ref7.overallTeamDashboard, 1);

            const _visitorTeamDashboardData = _ref7$overallTeamDash[0];


            homeTeamDashboardData = _homeTeamDashboardData;
            visitorTeamDashboardData = _visitorTeamDashboardData;
          } catch (err) {
            catchError(err, 'NBA.teamSplits()');
          }

          spinner.stop();

          (0, _preview2.default)(homeTeam, visitorTeam, (0, _extends3.default)({}, seasonMetaData, gameBoxScoreData, {
            homeTeamDashboardData,
            visitorTeamDashboardData
          }));
          break;
        }

      case 'Halftime':
      case '2':
        {
          let updatedPlayByPlayData;
          let updatedGameBoxScoreData;

          seasonText.setContent((0, _log.bold)(`${seasonMetaData.display_year} ${seasonMetaData.display_season}`));
          var _gameBoxScoreData3 = gameBoxScoreData;
          const arena = _gameBoxScoreData3.arena,
                city = _gameBoxScoreData3.city,
                state = _gameBoxScoreData3.state,
                date = _gameBoxScoreData3.date,
                time = _gameBoxScoreData3.time;

          dateText.setContent(`${_nodeEmoji2.default.get('calendar')}  ${(0, _format2.default)(date, 'YYYY/MM/DD')} ${time.slice(0, 2)}:${time.slice(2, 4)}`);
          arenaText.setContent(`${_nodeEmoji2.default.get('house')}  ${arena} | ${city}, ${state}`);

          while (true) {
            let gamePlayByPlayData = {};

            try {
              var _ref8 = yield _nba2.default.getPlayByPlayFromDate(new Date(_date), gameData.id);

              const _updatedPlayByPlayData = _ref8.sports_content.game;


              updatedPlayByPlayData = _updatedPlayByPlayData;
            } catch (err) {
              catchError(err, 'NBA.getPlayByPlayFromDate()');
            }

            try {
              var _ref9 = yield _nba2.default.getBoxScoreFromDate(new Date(_date), gameData.id);

              const _updatedGameBoxScoreData = _ref9.sports_content.game;


              updatedGameBoxScoreData = _updatedGameBoxScoreData;
            } catch (err) {
              catchError(err, 'NBA.getBoxScoreFromDate()');
            }

            gamePlayByPlayData = updatedPlayByPlayData;
            gameBoxScoreData = updatedGameBoxScoreData;

            const lastPlay = gamePlayByPlayData.play.slice(-1).pop();
            homeTeam.setScore(lastPlay.home_score);
            visitorTeam.setScore(lastPlay.visitor_score);

            const isFinal = (lastPlay.period === '4' || +lastPlay.period > 4) && lastPlay.description === 'End Period' && lastPlay.home_score !== lastPlay.visitor_score;

            (0, _live2.default)(homeTeam, visitorTeam, (0, _extends3.default)({}, gamePlayByPlayData, seasonMetaData, {
              isFinal
            }), gameBoxScoreData, {
              screen,
              scoreboardTable,
              timeText,
              homeTeamScoreText,
              visitorTeamScoreText,
              playByPlayBox,
              boxscoreTable
            });

            if (isFinal) {
              break;
            }

            yield (0, _delay2.default)(gameData.period_time.game_status === 'Halftime' ? 15000 : 3000);
          }
          break;
        }

      case '3':
      default:
        {
          screen.destroy();
          console.log('');
          (0, _scoreboard2.default)(homeTeam, visitorTeam, (0, _extends3.default)({}, gameBoxScoreData, seasonMetaData));
          console.log('');
          (0, _boxScore2.default)(homeTeam, visitorTeam);
        }
    }
  });

  return function game(_x3) {
    return _ref2.apply(this, arguments);
  };
})();

exports.default = game;
//# sourceMappingURL=index.js.map