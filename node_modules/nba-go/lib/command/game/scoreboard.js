'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _format = require('date-fns/format');

var _format2 = _interopRequireDefault(_format);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _wideAlign = require('wide-align');

var _log = require('../../utils/log');

var _table = require('../../utils/table');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const vAlignCenter = columns => columns.map(column => {
  if (typeof column === 'string') {
    return { content: column, vAlign: 'center', hAlign: 'center' };
  }

  return (0, _extends3.default)({}, column, { vAlign: 'center' });
});

const getStartingPlayers = team => team.getPlayers().filter(player => player.starting_position !== '' || player.on_court === '1').map(player => ({
  name: `${player.first_name} ${player.last_name}`,
  position: player.starting_position || player.position_short
}));

const teamGameLeaders = (homeTeam, visitorTeam, field) => vAlignCenter([{
  colSpan: 3,
  content: (0, _log.bold)(`${homeTeam.getGameLeaders(field).leader[0].FirstName} ${homeTeam.getGameLeaders(field).leader[0].LastName}`),
  hAlign: 'right'
}, (0, _log.nbaRed)(homeTeam.getGameLeaders(field).StatValue), {
  colSpan: 2,
  content: field,
  hAlign: 'center'
}, (0, _log.nbaRed)(visitorTeam.getGameLeaders(field).StatValue), {
  colSpan: 3,
  content: (0, _log.bold)(`${visitorTeam.getGameLeaders(field).leader[0].FirstName} ${visitorTeam.getGameLeaders(field).leader[0].LastName}`),
  hAlign: 'left'
}]);

const scoreboard = (homeTeam, visitorTeam, { date, time, arena, city, state, display_year, display_season }) => {
  const scoreboardTable = (0, _table.basicTable)();

  const formatedTime = `${time.slice(0, 2)}:${time.slice(2, 4)}`;

  const homeTeamStartingPlayers = getStartingPlayers(homeTeam);
  const visitorTeamStartingPlayers = getStartingPlayers(visitorTeam);

  scoreboardTable.push(vAlignCenter([{
    colSpan: 10,
    content: (0, _log.bold)(`${display_year} ${display_season}`),
    hAlign: 'center'
  }]), vAlignCenter([{
    colSpan: 2,
    content: (0, _log.bold)(homeTeam.getName({ color: true })),
    hAlign: 'center'
  }, {
    colSpan: 6,
    content: (0, _log.bold)('Final'),
    hAlign: 'center'
  }, {
    colSpan: 2,
    content: (0, _log.bold)(visitorTeam.getName({ color: true })),
    hAlign: 'center'
  }]), vAlignCenter(['PG', {
    content: (0, _log.bold)(homeTeamStartingPlayers.filter(player => player.position.indexOf('G') > -1)[1].name),
    hAlign: 'left'
  }, (0, _log.bold)('Team'), (0, _log.bold)('Q1'), (0, _log.bold)('Q2'), (0, _log.bold)('Q3'), (0, _log.bold)('Q4'), // FIXME OT
  (0, _log.bold)((0, _wideAlign.center)('Total', 9)), 'PG', {
    content: (0, _log.bold)(visitorTeamStartingPlayers.filter(player => player.position.indexOf('G') > -1)[1].name),
    hAlign: 'left'
  }]), vAlignCenter(['SG', {
    content: (0, _log.bold)(homeTeamStartingPlayers.filter(player => player.position.indexOf('G') > -1)[0].name),
    hAlign: 'left'
  }, `${homeTeam.getAbbreviation({
    color: true
  })} (${homeTeam.getWins()}-${homeTeam.getLoses()})`, (0, _log.bold)(homeTeam.getQuarterScore('1')), (0, _log.bold)(homeTeam.getQuarterScore('2')), (0, _log.bold)(homeTeam.getQuarterScore('3')), (0, _log.bold)(homeTeam.getQuarterScore('4')), (0, _log.bold)((0, _log.neonGreen)(homeTeam.getScore())), 'SG', {
    content: (0, _log.bold)(visitorTeamStartingPlayers.filter(player => player.position.indexOf('G') > -1)[0].name),
    hAlign: 'left'
  }]), vAlignCenter(['SF', {
    content: (0, _log.bold)(homeTeamStartingPlayers.filter(player => player.position.indexOf('F') > -1)[1].name),
    hAlign: 'left'
  }, `${visitorTeam.getAbbreviation({
    color: true
  })} (${visitorTeam.getWins()}-${visitorTeam.getLoses()})`, (0, _log.bold)(visitorTeam.getQuarterScore('1')), (0, _log.bold)(visitorTeam.getQuarterScore('2')), (0, _log.bold)(visitorTeam.getQuarterScore('3')), (0, _log.bold)(visitorTeam.getQuarterScore('4')), (0, _log.bold)((0, _log.neonGreen)(visitorTeam.getScore())), 'SF', {
    content: (0, _log.bold)(visitorTeamStartingPlayers.filter(player => player.position.indexOf('F') > -1)[1].name),
    hAlign: 'left'
  }]), vAlignCenter(['PF', {
    content: (0, _log.bold)(homeTeamStartingPlayers.filter(player => player.position.indexOf('F') > -1)[0].name),
    hAlign: 'left'
  }, {
    colSpan: 6,
    content: (0, _log.bold)(`${_nodeEmoji2.default.get('calendar')}  ${(0, _format2.default)(date, 'YYYY/MM/DD')} ${formatedTime}`),
    hAlign: 'center'
  }, 'PF', {
    content: (0, _log.bold)(visitorTeamStartingPlayers.filter(player => player.position.indexOf('F') > -1)[0].name),
    hAlign: 'left'
  }]), vAlignCenter(['C', {
    content: (0, _log.bold)(homeTeamStartingPlayers.find(player => player.position === 'C').name),
    hAlign: 'left'
  }, {
    colSpan: 6,
    content: (0, _log.bold)(`${_nodeEmoji2.default.get('house')}  ${arena} â”‚ ${city}, ${state}`),
    hAlign: 'center'
  }, 'C', {
    content: (0, _log.bold)(visitorTeamStartingPlayers.find(player => player.position === 'C').name),
    hAlign: 'left'
  }]), [], vAlignCenter([{
    colSpan: 10,
    content: (0, _log.bold)('Game Record Leaders'),
    hAlign: 'center'
  }]), teamGameLeaders(homeTeam, visitorTeam, 'Points'), teamGameLeaders(homeTeam, visitorTeam, 'Assists'), teamGameLeaders(homeTeam, visitorTeam, 'Rebounds'));

  console.log(scoreboardTable.toString());
};

exports.default = scoreboard;
//# sourceMappingURL=scoreboard.js.map