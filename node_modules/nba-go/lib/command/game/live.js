'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _nbaColor = require('nba-color');

var _wideAlign = require('wide-align');

var _ramda = require('ramda');

var _ramda2 = _interopRequireDefault(_ramda);

var _nodeEmoji = require('node-emoji');

var _nodeEmoji2 = _interopRequireDefault(_nodeEmoji);

var _log = require('../../utils/log');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const checkOverStandard = (record, standard) => +record >= standard ? (0, _log.nbaRed)(record) : record;

const updateTeamQuarterScores = (team, latestPeriod, teamPeriod) => {
  // eslint-disable-next-line no-param-reassign
  teamPeriod = Array.isArray(teamPeriod) ? teamPeriod : [teamPeriod];

  const latestQuarterScore = teamPeriod.find(quarter => quarter.period_value === latestPeriod);

  if (latestQuarterScore && latestQuarterScore.score && latestPeriod) {
    if (team.getIsHomeTeam()) {
      team.setQuarterScore(latestPeriod, latestQuarterScore.score);
    } else {
      team.setQuarterScore(latestPeriod, latestQuarterScore.score);
    }
  }
};

const getOvertimePeriod = latestPeriod => parseInt(latestPeriod, 10) - 4;

const getScoreboardTableHeader = latestPeriod => {
  const scoreboardTableHeader = ['', 'Q1', 'Q2', 'Q3', 'Q4'];
  const overtimePeriod = getOvertimePeriod(latestPeriod);

  for (let i = 0; i < overtimePeriod; i += 1) {
    scoreboardTableHeader.push(`OT${overtimePeriod}`);
  }

  scoreboardTableHeader.push('Total');
  return scoreboardTableHeader;
};

const getTeamQuarterScores = (team, latestPeriod) => {
  const teamQuarterScores = [`${team.getAbbreviation({
    color: true
  })}`];

  for (let i = 1; i <= latestPeriod; i += 1) {
    teamQuarterScores.push((0, _log.bold)(team.getQuarterScore(`${i}`)));
  }
  for (let i = 0; i < 4 - latestPeriod; i += 1) {
    teamQuarterScores.push('  ');
  }

  teamQuarterScores.push((0, _log.neonGreen)(team.getScore()));

  return teamQuarterScores;
};

const getPlayByPlayRows = allPlays => {
  allPlays.reverse();

  const playByPlayRows = [];

  for (let i = 0; i < allPlays.length; i += 1) {
    var _allPlays$i = allPlays[i];
    const clock = _allPlays$i.clock,
          period = _allPlays$i.period,
          eventDescription = _allPlays$i.description,
          home_score = _allPlays$i.home_score,
          visitor_score = _allPlays$i.visitor_score,
          team_abr = _allPlays$i.team_abr;


    const overtimePeriod = getOvertimePeriod(period);
    const time = `${+overtimePeriod > 1 ? 'OT' : 'Q'}${+overtimePeriod > 1 ? overtimePeriod : period} ${clock !== '' ? clock : '12:00'}`;

    const scoreboard = `${(0, _wideAlign.right)(home_score > _ramda2.default.prop('home_score', allPlays[i + 1]) ? (0, _log.bold)((0, _log.neonGreen)(home_score)) : (0, _log.bold)(home_score), 3)} - ${(0, _wideAlign.left)(visitor_score > _ramda2.default.prop('visitor_score', allPlays[i + 1]) ? (0, _log.bold)((0, _log.neonGreen)(visitor_score)) : (0, _log.bold)(visitor_score), 3)}`;
    const teamColor = (0, _nbaColor.getMainColor)(team_abr) ? (0, _nbaColor.getMainColor)(team_abr).hex : '#000';
    const description = `${(0, _wideAlign.left)((0, _log.colorTeamName)(teamColor, `${team_abr}`), 3)} ${eventDescription.replace(/\[.*\]/i, '')}\n`;

    playByPlayRows.push([time, scoreboard, description].join(' â”‚ '));
  }

  return playByPlayRows.join('\n');
};

const getTeamBoxscore = (team, playersData) => {
  const teamBoxscoreRows = [];
  teamBoxscoreRows.push([team.getAbbreviation({ color: true }), (0, _log.bold)('PTS'), (0, _log.bold)('AST'), (0, _log.bold)('REB')]);

  const mainPlayers = playersData.sort((playerA, playerB) => +playerB.minutes - +playerA.minutes).slice(0, 5);

  mainPlayers.forEach(player => {
    teamBoxscoreRows.push([(0, _log.bold)((0, _wideAlign.left)(player.last_name, 14)), (0, _wideAlign.left)(checkOverStandard(player.points, 20), 3), (0, _wideAlign.left)(checkOverStandard(player.assists, 10), 3), (0, _wideAlign.left)(`${checkOverStandard(+player.rebounds_offensive + +player.rebounds_defensive, 10)}`, 3)]);
  });

  return teamBoxscoreRows;
};

const live = (homeTeam, visitorTeam, playByPlayData, gameBoxScoreData, blessedComponents) => {
  const allPlays = playByPlayData.play,
        isFinal = playByPlayData.isFinal;

  var _allPlays$slice$pop = allPlays.slice(-1).pop();

  const latestPeriod = _allPlays$slice$pop.period,
        latestClock = _allPlays$slice$pop.clock;
  const screen = blessedComponents.screen,
        scoreboardTable = blessedComponents.scoreboardTable,
        timeText = blessedComponents.timeText,
        homeTeamScoreText = blessedComponents.homeTeamScoreText,
        visitorTeamScoreText = blessedComponents.visitorTeamScoreText,
        playByPlayBox = blessedComponents.playByPlayBox,
        boxscoreTable = blessedComponents.boxscoreTable;
  const homeTeamPeriod = gameBoxScoreData.home.linescores.period,
        visitorTeamPeriod = gameBoxScoreData.visitor.linescores.period;


  updateTeamQuarterScores(homeTeam, latestPeriod, homeTeamPeriod);
  updateTeamQuarterScores(visitorTeam, latestPeriod, visitorTeamPeriod);

  scoreboardTable.setRows([getScoreboardTableHeader(latestPeriod), getTeamQuarterScores(homeTeam, latestPeriod), getTeamQuarterScores(visitorTeam, latestPeriod)]);

  boxscoreTable.setRows([...getTeamBoxscore(homeTeam, gameBoxScoreData.home.players.player), ...getTeamBoxscore(visitorTeam, gameBoxScoreData.visitor.players.player)]);

  playByPlayBox.setContent(getPlayByPlayRows(allPlays));
  playByPlayBox.focus();

  if (isFinal) {
    timeText.setContent((0, _log.bold)('Final'));
  } else {
    const overtimePeriod = getOvertimePeriod(latestPeriod);
    timeText.setContent((0, _log.bold)(`${_nodeEmoji2.default.get('stopwatch')}  ${+overtimePeriod > 1 ? 'OT' : 'Q'}${+overtimePeriod > 1 ? overtimePeriod : latestPeriod} ${latestClock}`));
  }

  homeTeamScoreText.setContent(homeTeam.getScore());
  visitorTeamScoreText.setContent(visitorTeam.getScore());

  screen.render();
};

exports.default = live;
//# sourceMappingURL=live.js.map