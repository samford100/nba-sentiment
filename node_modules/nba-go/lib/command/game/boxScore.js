'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _parseInt = require('babel-runtime/core-js/number/parse-int');

var _parseInt2 = _interopRequireDefault(_parseInt);

var _table = require('../../utils/table');

var _log = require('../../utils/log');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const alignCenter = columns => columns.map(content => ({ content, hAlign: 'left', vAlign: 'center' }));

const checkOverStandard = (record, standard) => +record >= standard ? (0, _log.nbaRed)(record) : record;

const checkGameHigh = (players, record, recordVal, standard) => {
  const recordArr = players.map(player => (0, _parseInt2.default)(player[record], 10));
  return recordVal >= Math.max(...recordArr) ? (0, _log.neonGreen)(recordVal) : checkOverStandard(recordVal, standard);
};

const createTeamBoxScore = team => {
  const players = team.getPlayers();
  const stats = team.getGameStats();
  const boxScoreTable = (0, _table.basicTable)();

  boxScoreTable.push([{
    colSpan: 16,
    content: team.getFullName({ color: true }),
    hAlign: 'left',
    vAlign: 'center'
  }], alignCenter([(0, _log.bold)('PLAYER'), (0, _log.bold)('POS'), (0, _log.bold)('MIN'), (0, _log.bold)('FG'), (0, _log.bold)('3FG'), (0, _log.bold)('FT'), (0, _log.bold)('+/-'), (0, _log.bold)('OREB'), (0, _log.bold)('DREB'), (0, _log.bold)('REB'), (0, _log.bold)('AST'), (0, _log.bold)('STL'), (0, _log.bold)('BLK'), (0, _log.bold)('TO'), (0, _log.bold)('PF'), (0, _log.bold)('PTS')]));

  players.forEach(player => {
    const first_name = player.first_name,
          last_name = player.last_name,
          position_short = player.position_short,
          minutes = player.minutes,
          field_goals_made = player.field_goals_made,
          field_goals_attempted = player.field_goals_attempted,
          three_pointers_made = player.three_pointers_made,
          three_pointers_attempted = player.three_pointers_attempted,
          free_throws_made = player.free_throws_made,
          free_throws_attempted = player.free_throws_attempted,
          plus_minus = player.plus_minus,
          rebounds_offensive = player.rebounds_offensive,
          rebounds_defensive = player.rebounds_defensive,
          assists = player.assists,
          steals = player.steals,
          blocks = player.blocks,
          turnovers = player.turnovers,
          fouls = player.fouls,
          points = player.points;


    const totalRebounds = +rebounds_offensive + +rebounds_defensive;

    boxScoreTable.push(alignCenter([(0, _log.bold)(`${first_name} ${last_name}`), (0, _log.bold)(position_short), checkGameHigh(players, 'minutes', minutes, 35), `${field_goals_made}-${field_goals_attempted}`, `${three_pointers_made}-${three_pointers_attempted}`, `${free_throws_made}-${free_throws_attempted}`, checkGameHigh(players, 'plus_minus', plus_minus, 15), checkGameHigh(players, 'rebounds_offensive', rebounds_offensive, 10), checkGameHigh(players, 'rebounds_defensive', rebounds_defensive, 10), checkGameHigh(players, 'totalRebounds', totalRebounds, 10), checkGameHigh(players, 'assists', assists, 10), checkGameHigh(players, 'steals', steals, 5), checkGameHigh(players, 'blocks', blocks, 5), checkGameHigh(players, 'turnovers', turnovers, 5), checkGameHigh(players, 'fouls', fouls, 6), checkGameHigh(players, 'points', points, 20)]));
  });

  const points = stats.points,
        field_goals_made = stats.field_goals_made,
        field_goals_attempted = stats.field_goals_attempted,
        free_throws_made = stats.free_throws_made,
        free_throws_attempted = stats.free_throws_attempted,
        three_pointers_made = stats.three_pointers_made,
        three_pointers_attempted = stats.three_pointers_attempted,
        rebounds_offensive = stats.rebounds_offensive,
        rebounds_defensive = stats.rebounds_defensive,
        assists = stats.assists,
        fouls = stats.fouls,
        steals = stats.steals,
        turnovers = stats.turnovers,
        blocks = stats.blocks;


  boxScoreTable.push(alignCenter(['Totals', '', '', (0, _log.bold)(`${field_goals_made}-${field_goals_attempted}`), (0, _log.bold)(`${three_pointers_made}-${three_pointers_attempted}`), (0, _log.bold)(`${free_throws_made}-${free_throws_attempted}`), '', (0, _log.bold)(rebounds_offensive), (0, _log.bold)(rebounds_defensive), (0, _log.bold)(parseInt(rebounds_offensive, 10) + parseInt(rebounds_defensive, 10)), (0, _log.bold)(assists), (0, _log.bold)(steals), (0, _log.bold)(blocks), (0, _log.bold)(turnovers), (0, _log.bold)(fouls), (0, _log.bold)((0, _log.neonGreen)(points))]));

  console.log(boxScoreTable.toString());
};

const boxScore = (homeTeam, visitorTeam) => {
  createTeamBoxScore(homeTeam);
  console.log('');
  createTeamBoxScore(visitorTeam);
};

exports.default = boxScore;
//# sourceMappingURL=boxScore.js.map